NAME
    Net::KCRW::Playlist - Fetch playlist data for the KCRW.org radio station

SYNOPSIS
     my $ymd = '20081230';
     my $start = undef;
     my $stop = '10 AM';

     my $kcrw = Net::KCRW::Playlist->new();
     my $songs = $kcrw->fetch($ymd, $start, $stop);

     print Dumper($songs);

     # which would print something like this:

     $VAR1 = [
              {
                'album' => 'Bajo Fondo',
                'artist' => 'Emilio Kauderer',
                'song' => 'Maroma (Fill)',
                'time' => '8:59'
              },
              {
                'album' => 'Popular (Unreleased)',
                'artist' => 'Van Hunt',
                'song' => 'Turn My Tv On',
                'time' => '9:04'
              },
              {
                'album' => 'Verve Unmixed 4 Verve',
                'artist' => 'Marlena Shaw',
                'song' => 'California Soul',
                'time' => '9:08'
              },
              ]

DESCRIPTION
    Fetch playlist data for the KCRW.org radio station.

PACKAGE METHODS
  __PACKAGE__->new(%args)
    Net::KCRW::Playlist subclasses the LWP::UserAgent package so anything
    you can pass to the latter's contructor you may pass to the former.

    Returns a *Net::KCRW::Playlist* object!

OBJECT METHODS
  $obj->fetch($ymd, $start, $stop)
    * $ymd (required)
        The year, month and day to fetch playlist information. Should be
        formatted as a ISO-8601 compliant date (but can be formatted in
        anything the *Date::Parse* module understands).

    * $start (optional)
        The minimum time of day in which to fetch playlist information. Can
        be formatted in anything that the *Date::Parse* understands.

    * $stop (optional)
        The maximum time of day in which to fetch playlist information. Can
        be formatted in anything that the *Date::Parse* understands.

    Returns an array reference of tracks/songs, each a hash reference
    containing the following keys: time, artist, song and album.

  $obj->assign_musicbrainz_ids(\@songs)
    Iterate through a list of songs (returned by the *fetch* method) and try
    to assign a MusicBrainz track ID, release (album) ID and duration info.

    At the moment, this method isn't very smart about trying to disambiguate
    multiple track listings returned via the MusicBrainz API.

    If successful, the keys assigned are: mb_track_id, mb_release_id and
    mb_duration.

    Returns true or false.

  $obj->scrobble($lastfm_user, $lastfm_pswd, \@songs)
    There are two things to note about this method.

    * 1 It uses the old-skool Last.fm API instead of the shiny-token based
    one.
        Holy anti-password patterns, Batman!

    * 2 It doesn't seem to work.
        I presume this has something to do with the magic specialness of how
        scrobbling works. Specifically, you need a blessed key or something.

        Currently the tst account/scrobble-key is hard-coded, per the docs
        but that doesn't seem to work either.

        It's on the list, but if someone wants to figure it out sooner that
        would be grand.

DATE
    $Date: 2009/05/13 14:55:43 $

AUTHOR
    Aaron Straup Cope <ascope@cpan.org>

LICENSE
    Copyright (c) 2008-2009 Aaron Straup Cope. All Rights Reserved.

    This is free software. You may redistribute it and/or modify it under
    the same terms as Perl itself.

